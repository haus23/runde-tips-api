security:
    encoders:
        # InMemory Dev Users
        Symfony\Component\Security\Core\User\User:
            algorithm: plaintext
        # App Users
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # After having a real super admin in the db it's safe to remove this provider
        dev_admin:
            memory:
                users:
                    admin: { password: '%env(ADMIN_PASSWORD)%', roles: ['ROLE_ADMIN'] }
        users:
            entity:
                class: App\Entity\User
                property: account
        dev_all_users:
            chain:
                providers: ['dev_admin', 'users']

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            lazy: true
            
            # Remeber to change to the users provider.
            provider: dev_all_users

            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/migration, roles: ROLE_ADMIN }
        - { path: ^/backend, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
